// automatically generated by the FlatBuffers compiler, do not modify

package ppx

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProtocolTensor struct {
	_tab flatbuffers.Table
}

func GetRootAsProtocolTensor(buf []byte, offset flatbuffers.UOffsetT) *ProtocolTensor {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProtocolTensor{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ProtocolTensor) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProtocolTensor) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProtocolTensor) Data(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ProtocolTensor) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ProtocolTensor) Shape(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ProtocolTensor) ShapeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ProtocolTensorStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ProtocolTensorAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(data), 0)
}
func ProtocolTensorStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ProtocolTensorAddShape(builder *flatbuffers.Builder, shape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(shape), 0)
}
func ProtocolTensorStartShapeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProtocolTensorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
