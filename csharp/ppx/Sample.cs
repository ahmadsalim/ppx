// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ppx
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Sample : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Sample GetRootAsSample(ByteBuffer _bb) { return GetRootAsSample(_bb, new Sample()); }
  public static Sample GetRootAsSample(ByteBuffer _bb, Sample obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sample __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Address { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAddressBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAddressBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAddressArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public ppx.Distribution DistributionType { get { int o = __p.__offset(8); return o != 0 ? (ppx.Distribution)__p.bb.Get(o + __p.bb_pos) : ppx.Distribution.NONE; } }
  public TTable? Distribution<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public bool Control { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool Replace { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<ppx.Sample> CreateSample(FlatBufferBuilder builder,
      StringOffset addressOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      ppx.Distribution distribution_type = ppx.Distribution.NONE,
      int distributionOffset = 0,
      bool control = true,
      bool replace = false) {
    builder.StartTable(6);
    Sample.AddDistribution(builder, distributionOffset);
    Sample.AddName(builder, nameOffset);
    Sample.AddAddress(builder, addressOffset);
    Sample.AddReplace(builder, replace);
    Sample.AddControl(builder, control);
    Sample.AddDistributionType(builder, distribution_type);
    return Sample.EndSample(builder);
  }

  public static void StartSample(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddAddress(FlatBufferBuilder builder, StringOffset addressOffset) { builder.AddOffset(0, addressOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDistributionType(FlatBufferBuilder builder, ppx.Distribution distributionType) { builder.AddByte(2, (byte)distributionType, 0); }
  public static void AddDistribution(FlatBufferBuilder builder, int distributionOffset) { builder.AddOffset(3, distributionOffset, 0); }
  public static void AddControl(FlatBufferBuilder builder, bool control) { builder.AddBool(4, control, true); }
  public static void AddReplace(FlatBufferBuilder builder, bool replace) { builder.AddBool(5, replace, false); }
  public static Offset<ppx.Sample> EndSample(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ppx.Sample>(o);
  }
};


}
